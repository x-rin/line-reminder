// Code generated by MockGen. DO NOT EDIT.
// Source: line_reminder/line.go

// Package mock_line_reminder is a generated GoMock package.
package mock_line_reminder

import (
	gomock "github.com/golang/mock/gomock"
	linebot "github.com/line/line-bot-sdk-go/linebot"
	http "net/http"
	reflect "reflect"
)

// MockLineClient is a mock of LineClient interface
type MockLineClient struct {
	ctrl     *gomock.Controller
	recorder *MockLineClientMockRecorder
}

// MockLineClientMockRecorder is the mock recorder for MockLineClient
type MockLineClientMockRecorder struct {
	mock *MockLineClient
}

// NewMockLineClient creates a new mock instance
func NewMockLineClient(ctrl *gomock.Controller) *MockLineClient {
	mock := &MockLineClient{ctrl: ctrl}
	mock.recorder = &MockLineClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLineClient) EXPECT() *MockLineClientMockRecorder {
	return m.recorder
}

// PostMessage mocks base method
func (m *MockLineClient) PostMessage(message string) error {
	ret := m.ctrl.Call(m, "PostMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostMessage indicates an expected call of PostMessage
func (mr *MockLineClientMockRecorder) PostMessage(message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockLineClient)(nil).PostMessage), message)
}

// ReplyMessage mocks base method
func (m *MockLineClient) ReplyMessage(token, message string) error {
	ret := m.ctrl.Call(m, "ReplyMessage", token, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyMessage indicates an expected call of ReplyMessage
func (mr *MockLineClientMockRecorder) ReplyMessage(token, message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyMessage", reflect.TypeOf((*MockLineClient)(nil).ReplyMessage), token, message)
}

// GetProfile mocks base method
func (m *MockLineClient) GetProfile(id string) (string, error) {
	ret := m.ctrl.Call(m, "GetProfile", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockLineClientMockRecorder) GetProfile(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockLineClient)(nil).GetProfile), id)
}

// ReceiveEvent mocks base method
func (m *MockLineClient) ReceiveEvent(req *http.Request) ([]linebot.Event, error) {
	ret := m.ctrl.Call(m, "ReceiveEvent", req)
	ret0, _ := ret[0].([]linebot.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveEvent indicates an expected call of ReceiveEvent
func (mr *MockLineClientMockRecorder) ReceiveEvent(req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveEvent", reflect.TypeOf((*MockLineClient)(nil).ReceiveEvent), req)
}
