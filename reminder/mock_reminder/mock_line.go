// Code generated by MockGen. DO NOT EDIT.
// Source: reminder/line.go

// Package mock_reminder is a generated GoMock package.
package mock_reminder

import (
	gomock "github.com/golang/mock/gomock"
	linebot "github.com/line/line-bot-sdk-go/linebot"
	http "net/http"
	reflect "reflect"
)

// MockLineAPI is a mock of LineAPI interface
type MockLineAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLineAPIMockRecorder
}

// MockLineAPIMockRecorder is the mock recorder for MockLineAPI
type MockLineAPIMockRecorder struct {
	mock *MockLineAPI
}

// NewMockLineAPI creates a new mock instance
func NewMockLineAPI(ctrl *gomock.Controller) *MockLineAPI {
	mock := &MockLineAPI{ctrl: ctrl}
	mock.recorder = &MockLineAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLineAPI) EXPECT() *MockLineAPIMockRecorder {
	return m.recorder
}

// PushMessage mocks base method
func (m *MockLineAPI) PushMessage(to string, message linebot.Message) (*linebot.BasicResponse, error) {
	ret := m.ctrl.Call(m, "PushMessage", to, message)
	ret0, _ := ret[0].(*linebot.BasicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushMessage indicates an expected call of PushMessage
func (mr *MockLineAPIMockRecorder) PushMessage(to, message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushMessage", reflect.TypeOf((*MockLineAPI)(nil).PushMessage), to, message)
}

// ReplyMessage mocks base method
func (m *MockLineAPI) ReplyMessage(replyToken string, message linebot.Message) (*linebot.BasicResponse, error) {
	ret := m.ctrl.Call(m, "ReplyMessage", replyToken, message)
	ret0, _ := ret[0].(*linebot.BasicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplyMessage indicates an expected call of ReplyMessage
func (mr *MockLineAPIMockRecorder) ReplyMessage(replyToken, message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyMessage", reflect.TypeOf((*MockLineAPI)(nil).ReplyMessage), replyToken, message)
}

// GetProfile mocks base method
func (m *MockLineAPI) GetProfile(userID string) (*linebot.UserProfileResponse, error) {
	ret := m.ctrl.Call(m, "GetProfile", userID)
	ret0, _ := ret[0].(*linebot.UserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockLineAPIMockRecorder) GetProfile(userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockLineAPI)(nil).GetProfile), userID)
}

// ParseRequest mocks base method
func (m *MockLineAPI) ParseRequest(r *http.Request) ([]linebot.Event, error) {
	ret := m.ctrl.Call(m, "ParseRequest", r)
	ret0, _ := ret[0].([]linebot.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRequest indicates an expected call of ParseRequest
func (mr *MockLineAPIMockRecorder) ParseRequest(r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRequest", reflect.TypeOf((*MockLineAPI)(nil).ParseRequest), r)
}
