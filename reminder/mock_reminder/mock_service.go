// Code generated by MockGen. DO NOT EDIT.
// Source: reminder/service.go

// Package mock_reminder is a generated GoMock package.
package mock_reminder

import (
	gomock "github.com/golang/mock/gomock"
	linebot "github.com/line/line-bot-sdk-go/linebot"
	http "net/http"
	reflect "reflect"
)

// MockLineService is a mock of LineService interface
type MockLineService struct {
	ctrl     *gomock.Controller
	recorder *MockLineServiceMockRecorder
}

// MockLineServiceMockRecorder is the mock recorder for MockLineService
type MockLineServiceMockRecorder struct {
	mock *MockLineService
}

// NewMockLineService creates a new mock instance
func NewMockLineService(ctrl *gomock.Controller) *MockLineService {
	mock := &MockLineService{ctrl: ctrl}
	mock.recorder = &MockLineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLineService) EXPECT() *MockLineServiceMockRecorder {
	return m.recorder
}

// GetTargetName mocks base method
func (m *MockLineService) GetTargetName(id string) (string, error) {
	ret := m.ctrl.Call(m, "GetTargetName", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetName indicates an expected call of GetTargetName
func (mr *MockLineServiceMockRecorder) GetTargetName(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetName", reflect.TypeOf((*MockLineService)(nil).GetTargetName), id)
}

// Send mocks base method
func (m *MockLineService) Send(message string) error {
	ret := m.ctrl.Call(m, "Send", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockLineServiceMockRecorder) Send(message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLineService)(nil).Send), message)
}

// Hear mocks base method
func (m *MockLineService) Hear(request *http.Request) (linebot.Event, error) {
	ret := m.ctrl.Call(m, "Hear", request)
	ret0, _ := ret[0].(linebot.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hear indicates an expected call of Hear
func (mr *MockLineServiceMockRecorder) Hear(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hear", reflect.TypeOf((*MockLineService)(nil).Hear), request)
}

// Reply mocks base method
func (m *MockLineService) Reply(replyToken, message string) error {
	ret := m.ctrl.Call(m, "Reply", replyToken, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reply indicates an expected call of Reply
func (mr *MockLineServiceMockRecorder) Reply(replyToken, message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockLineService)(nil).Reply), replyToken, message)
}
